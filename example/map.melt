package main

interface Sequence<T>:
	Begin() *T
	Next() *T
	Length() int

func Map?<T, U>(handler? T -> U, sequence Sequence<T>) []U:
	result = make([]U, len(sequence))
	for i, item in sequence:
		result[i] = handler?(item)

	escalate handler
	return result

func Double(number int) int:
	return number * 2

func main:
	print(Map(Double, [2]))

# Map {}
# 8
#Map?()
#
# type handlerIntAst func(int) (Ast, error)
# func map(handler handlerIntAst, sequence []int) ([]Ast, error) {
#     var result []int
#     for _, item := range sequence {
#         result, err := append(result, item)
# 		  if err != nil {
#             return []Ast{}, errors.New(fmt.P("Handler failed with %s", err))
#         }
#     }
#     return result, nil
# }
